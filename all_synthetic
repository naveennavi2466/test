import requests
import json
import pandas as pd

# Windows-style path
file_path = r"C:\Users\YourUsername\Documents\envs_with_admin_tokens.json"

# Load environment list
with open(file_path, "r") as f:
    environments = json.load(f)

excel_data = []

for env in environments:
    env_id = env['env_id'].replace("https://", "").rstrip("/")
    api_token = env['api_token']

    headers = {
        "Authorization": f"Api-Token {api_token}"
    }

    try:
        print(f"üîç Fetching synthetic locations from {env_id}...")

        # Corrected endpoint for synthetic locations
        locations_url = f"https://{env_id}/api/v2/synthetic/locations"
        loc_response = requests.get(locations_url, headers=headers)
        loc_response.raise_for_status()
        locations_data = loc_response.json()

        for loc in locations_data.get("locations", []):
            loc_id = loc.get("entityId", loc.get("id", "N/A"))
            loc_name = loc.get("name", "N/A")
            ag_host = loc.get("host", "N/A")
            location_type = loc.get("type", "N/A")

            # Safely construct the monitor query
            entity_selector = f"type(SYNTHETIC_TEST),fromRelationships.runsOnSyntheticLocation('{loc_id}')"
            monitors_url = f"https://{env_id}/api/v2/entities?entitySelector={entity_selector}"
            mon_response = requests.get(monitors_url, headers=headers)
            mon_response.raise_for_status()
            monitors_data = mon_response.json()

            monitor_count = len(monitors_data.get("entities", []))
            monitor_types = list(set(m.get("properties", {}).get("type", "N/A") for m in monitors_data.get("entities", [])))

            excel_data.append({
                "Environment": env_id,
                "Hostname": ag_host,
                "Location": loc_name,
                "Location Type": location_type,
                "Monitor Count": monitor_count,
                "Monitor Types": ", ".join(monitor_types)
            })

        print(f"‚úÖ Success: {env_id}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error for {env_id}: {e}")

# Save to Excel
excel_output_path = r"C:\Users\YourUsername\Documents\synthetic_activegates.xlsx"
df = pd.DataFrame(excel_data)
df.to_excel(excel_output_path, index=False)

print(f"\n‚úÖ All done! Synthetic ActiveGate info saved to:\n{excel_output_path}")
